package customer.apnacare.in.customer.activity;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.support.v4.content.LocalBroadcastManager;import butterknife.BindView;import butterknife.ButterKnife;import co.moonmonkeylabs.realmrecyclerview.RealmRecyclerView;import customer.apnacare.in.customer.R;import customer.apnacare.in.customer.adapters.CasesListAdapter;import customer.apnacare.in.customer.model.CaseRecord;import customer.apnacare.in.customer.service.DataSyncService;import customer.apnacare.in.customer.utils.CustomerApp;import io.realm.Realm;import io.realm.RealmResults;/** * Created by root on 27/12/16. */public class CasesActivity extends BaseActivity {    @BindView(R.id.casesList) RealmRecyclerView casesListRecycler;    private Realm realm;    CasesListAdapter casesListAdapter;    int carePlanID;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_case);        ButterKnife.bind(this);        setUpNavigation("Cases - All");        realm = Realm.getDefaultInstance();        RealmResults<CaseRecord> casesList = realm.where(CaseRecord.class).findAll();        //Log.v(Constants.TAG,"casesList size: "+casesList.size());        //Log.v(Constants.TAG,"casesListt size: "+casesList.toString());        casesListAdapter = new CasesListAdapter(this, casesList, true, true);        casesListRecycler.setAdapter(casesListAdapter);        casesListRecycler.setOnRefreshListener(new RealmRecyclerView.OnRefreshListener() {            @Override            public void onRefresh() {                Intent i = new Intent(mContext, DataSyncService.class);                i.putExtra("serviceName", "loadCases");                i.putExtra("type","All");                startService(i);            }        });    }    // Define the callback for what to do when data is received    private BroadcastReceiver DataSyncReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String serviceName;            int resultCode = intent.getIntExtra("resultCode", Activity.RESULT_CANCELED);            if (resultCode == Activity.RESULT_OK) {                serviceName = intent.getStringExtra("serviceName");                int resultValue = intent.getIntExtra("resultValue",2);                hideProgressBar();                casesListRecycler.setRefreshing(false);                casesListAdapter.notifyDataSetChanged();            }        }    };    public void redirect(){        if(CustomerApp.isConnectedToInternet){            startActivity(new Intent(CasesActivity.this,MainActivity.class));        }    }    @Override    public void onResume() {        // Register for the particular broadcast based on ACTION string        IntentFilter filter = new IntentFilter(DataSyncService.ACTION);        LocalBroadcastManager.getInstance(mContext).registerReceiver(DataSyncReceiver, filter);        // or `registerReceiver(DataSyncReceiver, filter)` for a normal broadcast        hideProgressBar();        super.onResume();    }    @Override    public void onPause() {        // Unregister the listener when the application is paused        LocalBroadcastManager.getInstance(mContext).unregisterReceiver(DataSyncReceiver);        // or `unregisterReceiver(DataSyncReceiver)` for a normal broadcast        hideProgressBar();        super.onPause();    }    @Override    public void onDestroy(){        LocalBroadcastManager.getInstance(mContext).unregisterReceiver(DataSyncReceiver);        hideProgressBar();        realm.close();        realm = null;        super.onDestroy();    }    @Override    public void onStop(){        hideProgressBar();        super.onStop();    }}